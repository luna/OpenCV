import Std.Foreign.C.Value
import Std.Foreign
import OpenCV.Magick
import OpenCV.Image


class Rect:
    Rect
    RectVal CInt CInt CInt CInt

    def readPtr p:
        pp = PointerVal CInt p.cast
        [x, y, width, height] = 0 . upto 3 . each i: pp . moveElems i . read
        RectVal x y width height

    def byteSize:
        CInt.byteSize*4

    def x: case self of
        RectVal x _ _ _: x
    def y: case self of
        RectVal _ y _ _: y
    def width: case self of
        RectVal _ _ width _: width
    def height: case self of
        RectVal _ _ _ height: height

    def toJSON:
        intList = [self.x, self.y, self.width, self.height].map .toInt
        intList.toJSON

    def draw rect img:
        r = 255.0
        g = 0.0
        b = 0.0
        a = 255.0
        res = img.copy
        mat = Mat.fromImage res
        OpenCV.cCall "lunaCV_rectangle" None [mat.toCArg, CInt.fromInt rect.x.toInt . toCArg, CInt.fromInt rect.y.toInt . toCArg, CInt.fromInt (rect.width.toInt+rect.x.toInt) . toCArg, CInt.fromInt (rect.height.toInt+rect.y.toInt) . toCArg, CDouble.fromReal r . toCArg, CDouble.fromReal g . toCArg, CDouble.fromReal b . toCArg, CDouble.fromReal a . toCArg]
        res


class Mat:
    Mat
    MatVal (Pointer None)

    def free:
        OpenCV.cCall "lunaCV_free_mat" None [self.toCArg]

    def toCArg: case self of
        MatVal a: a.toCArg

    def rows:
        n = OpenCV.cCall "lunaCV_mat_rows" (CInt) [self.toCArg]
        n.toInt

    def cols:
        n = OpenCV.cCall "lunaCV_mat_cols" (CInt) [self.toCArg]
        n.toInt

    def data:
        px = OpenCV.cCall "lunaCV_mat_data" (Pointer CUChar) [self.toCArg]
        px

    def fromImage img:
        mat = OpenCV.cCall "lunaCV_cv_mat" (Pointer None) [CInt.fromInt img.width . toCArg, CInt.fromInt img.height . toCArg, img.channels.toCArg, img.data.toCArg]
        fin = OpenCV.cSym "lunaCV_free_mat"
        MatVal mat

    def write image filepath:
        write = OpenCV.cCall "lunaCV_imwrite" None [Mat.fromImage image . toCArg, CString.fromText filepath . toCArg]
        None





class CascadeClassifier:
    CascadeClassifier
    CascadeClassifierVal (Pointer None)

    def free:
        OpenCV.cCall "lunaCV_cascade_classifier_delete" None [self.toCArg]

    def toCArg: case self of
        CascadeClassifierVal a: a.toCArg

    def throwIfFail status:
        case status.isNull of
            True: None
            False:
                strStatus = CString.readPtr status
                throw strStatus.toText

    def load xmlFile:
        ok = Pointer CInt . malloc
        cascade = OpenCV.cCall "lunaCV_cascade_classifier_load" (Pointer None) [CString.fromText xmlFile . toCArg, ok.toCArg]
        case ok.read.toInt of
            0: CascadeClassifierVal cascade
            1: throw ("Unable to load xml file" + xmlFile)

    def detectMultiscale img scaleFactor minNeighbors flags minW minH maxW maxH:
        facesN = Pointer CInt . malloc
        error = Pointer CString . malloc
        mat   = Mat.fromImage img
        maxWidth = maxW.withDefault 0
        maxHeiht = maxH.withDefault 0
        faces = OpenCV.cCall "lunaCV_cascade_classifier_detect_multiscale" (Pointer CInt) [mat.toCArg, self.toCArg, CDouble.fromReal scaleFactor . toCArg, CInt.fromInt minNeighbors . toCArg, CInt.fromInt flags . toCArg, CInt.fromInt minW . toCArg, CInt.fromInt minH . toCArg, CInt.fromInt maxWidth . toCArg, CInt.fromInt maxHeiht . toCArg, facesN.toCArg, error.toCArg]
        case error.read.isNull of
            True:
                rectArray = Array Rect . make facesN.read.toInt (PointerVal Rect faces.ptr.cast)
                rectArray.toList
            False: throw error.read.toText



class OpenCV:
    OpenCV

    def cSym name:
        lookupSymbol "cv" name

    def cCall name ret args:
        self . cSym name . call ret args

    def equalizeHistogram img:
        dst      = img.alloc img.width img.height img.channels
        equalize = self . cCall "lunaCV_equalizeHist" None [Mat.fromImage img . toCArg, Mat.fromImage dst . toCArg]
        dst
